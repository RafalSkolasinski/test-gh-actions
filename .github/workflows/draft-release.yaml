name: Draft New Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for new draft (e.g. v0.1.0)'
        required: true

env:
  GITHUB_USER: morda-bot

jobs:
  update-release-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Git Commit
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate workflow inputs
        run: |
          set -e

          RELEASE_BRANCH=$(echo ${GITHUB_REF#refs/heads/})
          RELEASE_TAG="${{ steps.release-tag.outputs.value }}"

          # TODO: validate that RELEASE BRANCH is for release line

          # Release tag version must match v<major>.<minor>.<patch> and optional -rcX suffix
          if ! echo "${RELEASE_TAG}" | egrep '^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)*$'; then
            echo "::error::Target version '${RELEASE_TAG}' is not valid release tag." >&2
            exit 1
          fi

          # Ensure that release does not yet exist
          if git rev-parse ${RELEASE_TAG}; then
            echo "::error::Release tag ${RELEASE_TAG} already exists. Stopping draft process."
            exit 1
          fi

          # Save env variables for later steps
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global user.name "${GITHUB_USER}"
          git config --global user.email "${GITHUB_USER}@users.noreply.github.com"

      - name: Configure node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install auto-changelog tool
        run: |
          npm install -g auto-changelog

      - name: Generate and commit changelog
        run: |
          git commit -m "Generating changelog for $TAG" --allow-empty
          git tag "${env.RELEASE_TAG}" --force && auto-changelog -l 5
          git add CHANGELOG.md && git commit --amend --no-edit
          git push

      - name: Generate release notes
        run: |
          auto-changelog --starting-version ${env.RELEASE_TAG} --ending-version ${env.RELEASE_TAG} -l 5 -o release-notes.txt

      - name: Prepare release artifact
        working-directory: release
        run: make package

      - name: Create or edit release draft
        run: |
          # TODO: Valdiate that there is no published released (we should not get here if tag exists anyway)
          gh release delete "${env.RELEASE_TAG}"
          gh release create "${env.RELEASE_TAG}" --draft \
            --title "${env.RELEASE_TAG}"  \
            --notes-file release-notes.txt \
            --target "${env.RELEASE_BRANCH}" \
            release/fortunes.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
