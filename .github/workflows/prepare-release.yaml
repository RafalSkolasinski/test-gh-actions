name: Draft new release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version of new release (e.g. 0.1.0)."
        required: true
      changelog-commit-limit:
        description: "Value passed to auto-changelog --commit-limit argument"
        required: false
        default: "3"



env:
  GITHUB_USER: morda-bot

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Git Commit
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "${GITHUB_USER}"
          git config --global user.email "${GITHUB_USER}@users.noreply.github.com"

      - name: Create new branch for release (to work on)
        working-directory: release
        run: |
          git checkout "${BRANCH}" || git checkout -b "${BRANCH}"
          git push --set-upstream origin release-v${{ github.event.inputs.version }}
        env:
          BRANCH: release-v${{ github.event.inputs.version }}

      - name: Configure node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install auto-changelog tool
        run: |
          npm install -g auto-changelog

      - name: Generate and commit changelog
        run: |
          git commit -m "Generating changelog for $TAG" --allow-empty
          git tag "${TAG}" --force && auto-changelog -l ${{ github.event.inputs.changelog-commit-limit }}
          git add CHANGELOG.md && git commit --amend --no-edit && git tag "${TAG}" --force
          git push && git push origin ${TAG} --force
        env:
          TAG: v${{ github.event.inputs.version }}

      - name: Generate release notes
        run: |
          auto-changelog --starting-version ${TAG} --ending-version ${TAG} -l ${{ github.event.inputs.changelog-commit-limit }} -o release-notes.txt
        env:
          TAG: v${{ github.event.inputs.version }}

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: release-notes
      #     path: release-notes.txt

  # prepare-artifacts:
  #   runs-on: ubuntu-latest
  #   needs: prepare-release
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: release-notes

      - name: Prepare release artifact
        working-directory: release
        run: make package

  # draft-release:
  #   runs-on: ubuntu-latest
  #   needs: prepare-release
  #   steps:
  #     - name: Checkout Git Commit
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0


      - name: Create or edit release draft
        run: |
          gh release view "${TAG}" || gh release create -d "${TAG}" < /dev/null
          gh release edit "${TAG}" --notes-file release-notes.txt
          gh release upload ${TAG} fortunes.tgz --clobber
        env:
          TAG: v${{ github.event.inputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
